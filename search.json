[{"categories":["Secure Startup"],"content":"In Safer GitHub Setup, we restricted access to multiple operations in GitHub:\n Creating users can be done by owners, and we have few of those. Managing teams also requires owners privileges. Creating repositories is impossible for regular users.  This is where the GitHub Terraform Provider comes in.\nUsing this provider, you can:\n Create repositories  Configure branch protection on those repositories   Invite users Manage teams And much more…  By putting configuration files for this in a GitHub repo with the proper branch protection, now, everyone in your organization can invite new users, request changes to teams, and create repositories.\nService Account Automation requires service accounts. GitHub does not have the concept of a “service” account. All users are worldwide, and should represent people.\nTo ensure your automation does not depend on a specific person, you must create a service account of some kind.\n Create an email address for this purpose on your email provider (github-automation@your_org.pancakes) Create a GitHub account for it. Save the password in a password manager. If you are using Single Sign-On (SSO), and requiring it, grant permission to this account to log in to your organization via SAML. Create a Personal Access Token (PAT) for this service account. Add an email address to the GitHub account that will go to a mailing list you will receive. Disable SAML access and remove any email license you granted this service account. We don’t want it to be used interactively in the future anyway, so why pay for it to receive email?  Recommended Branch Protection For a critical repository that allows modifying teams, users and repositories, it is important for someone in your security team, or any other team responsible for security , to approve the changes. Therefore, your GitHub configuration repository should:\n Require 2 code reviews Have CODEOWNERs configured Have branch protection apply to administrators Require commit signing  # Require review from Security Team for all changes * @yourorg/security Process graph LR; id1(User) id3[(github-config-repo/feature-branch)] id4[(github-config-repo/main)] id2{Is Approved?} id5(Build Pipeline) id6(Terraform) id7(GitHub APIs) id8(GitHub Users) id9(GitHub Teams) id10(GitHub Repositories) id11(Code Owners) id12(Branch Protection) id1--Changes Configuration--id3 id3--PR--id11 id11--id2 id2--No--id1 id2--Yes--id4 id4--Build Trigger--id5 id5--Runs--id6 id6--Executes and applies--id7 id7--id8 id7--id9 id7--id10--id12  ","description":"","tags":null,"title":"Automating GitHub","uri":"/posts/github_automation/"},{"categories":["Secure Startup"],"content":"As a tech company, you need to host and version control your source code. Unless you’re super weird (or have crazy requirements), you’re likely to use a SaaS platform such as GitHub.\nThis article covers the main controls to implement on GitHub - but you’ll find that most of these have equivalents on platforms such as GitLab or BitBucket.\nThis guide is meant for companies new to using GitHub, but the recommendations can be used by any organization using it.\nLegend    Description Label     Everyone should do this 🍩   Slight need for increased security 🌯   For those that will operate infra supporting systems that are critical 🌶   Recommendations that require the Enterprise version 💰    Authentication Authentication is the lynchpin of security on SaaS applications such as GitHub.\nGitHub authentication differs to many SaaS products in one important way: accounts are global. Developers can and do carry their accounts from company to company and use them for open source projects.\nRequire two-factor authentication for everyone in the organization - 🍩 The first thing you should do to your new GitHub organization is to enable two-factor authentication. Even if you plan to use Single Sign-On (SSO) with an identity provider that requires SSO, that will protect access to your organization, but 2FA is needed to protect the user account itself.\nSingle Sign-On (SSO) - 🌯💰 A question I am frequently asked when companies are setting up their GitHub is\n Should we ask our employees to create new, work GitHub accounts?\n The answer to that is almost always no, due to a simple feature. If the goal is to make sure data does not get leaked to personal GitHub accounts, it is much easier to use SSO authentication for access to the organization and require an email on your corporate domain for notifications related to your projects.\ngraph LR; id1(User) id2(GitHub) id3(Organization) id4(SAML) id5(Personal email) id6(Work email) id7(Personal Projects) id3--notification--id6 id7--notification--id5 id1--Logs In--id2 id2--Accesses--id7 id2--Links to work org--id4 id4--Accesses--id3  That way, corporate GitHub notifications are accessible on corporate email, and GitHub sessions are protected with SAML.\nThe main downside of leveraging SSO on GitHub is that the price jumps from $4 per user/month to $21.\nThey’re not going to give up their ranking on sso.tax soon.\nGo to the Organization Security settings page. Enable SSO  Require SSO  Go to the Verified \u0026 approved domains settings page Verify your domain(s) Require that email notifications only be sent to approved or verified domains.   Administrator/Owner Privileges - 🌯 Keep administrator privileges to the absolute minimum. Keep in mind that anybody with owner privileges on your GitHub environment would be able to disable all the security controls discussed in this document - without being detected, unless you were using the Audit API with automated detection.\nMake sure two people can get to owner privileges, but no more.\nRepositories Repositories are the main reason organizations use GitHub. If you’re not going to create them, why bother?\nThere are many ways to protect repositories and the code they contain. Controlling who can create and configure repositories is needed to limit sprawl and configuration drift.\nMember Repository Permissions - 🌯 Ensure GitHub owners are the only ones able to create repositories.\nRepository Creation - 🌯 Under ‌Member repository permissions, make sure you uncheck permissions allowing the creation of public and private repositories.\n But what if I need people to be able to create repositories? I don’t want to slow them down!\n That’s what automation is for!\nRepository forking - 🍩 By default, ensure public repositories are the only one that can be forked, by disabling this feature.\nRepository Outside collaborators - 🌯 If you are using SAML, and are using that to enforce specific requirements on systems connecting to GitHub, disallow external collaborators. Instead, invite consultants as regular users, but give them an account on your identity provider.\nBranch Protection - 🍩 Branch protection is one of the most important settings to configure, and the main reason you should not have members with administrative privileges on the repositories.\nLocated in the Branches section of repository settings, you must create branch.\nFirst, ensure branch protection is enabled on at least your default branch.\nBranch Protection Settings    Setting Value For Description     Require a pull request before merging ✅ 🍩 Enforce code reviews   Require approvals 1️⃣ 🍩 Require at least 1 approval   Require approvals 2️⃣ 🌶 Require at least 2 approvals   Dismiss stale pull request approvals when new commits are pushed ✅ 🍩 Invalidated existing approvals when changing code   Require review from Code Owners ✅ 🍩 Require reviews from specific users or teams in CODEOWNERS   Require signed commits ✅ 🌶 Require GPG signing of commits   Include administrators ✅ 🍩 Apply rule to repository administrators and GitHub owners   Allow force pushes ⛔️ 🍩 Self-explanatory   Allow deletions ⛔️ 🍩 Self-explanatory    Other values should be configured based on your use cases.\nOther Settings Pages - 🌯 Ensure that regular members do not have the ability to create public pages, but can create private ones. This can prevent the accidental publishing of internal documentation or other data.\nAdmin Repository Permissions These permissions apply to members that have admin privileges on repositories.\nIt is important to limit admin privileges on repositories. These privileges are simply too high to grant to multiple people, as they allow disabling security features such as branch protection. Therefore, it is important to strive for repositories without administrators, except for service accounts used for automation.\nThat being said, these automation accounts might be attacked, and so, it is useful to limit the privileges being made available to those accounts.\nRepository visibility, deletion and transfer - 🌯 Visibility would allow a member to make a repository public, which could result in accidental or at least, unexpected public publishing of internal repositories.\nDeletion and transfer can also be dangerous, as an attacker might attempt to take control of repositories, in exchange for a ransom for example.\nMember team permissions - 🌯 Disable this to prevent members from creating teams, which should be managed through automation.\nMember organization permissions - 🍩 Enable this to ensure everyone contributing on your repositories has access to security advisories related to dependencies of the code.\nSecurity \u0026 Analysis - 🍩 Depending on your GitHub subscription level, and on your repositories being public or private, you will have access to various security and analysis tools.\nI recommend that you simply enable all of them by default.\nThere is no API for configuring these during repository creation, making the configuration of the defaults even more iportant.\nActions - 🌯 to 🌶 GitHub Actions lets you build workflows directly in GitHub. It can be used as a full-fledged CI/CD, or for simpler tasks.\nActions, by definitions, are code that is executed with permission to interact with repositories.\nIf you do not use Actions: block them all for now. If you do use Actions, and require a high level of security, allow specific Actions only.\nIf you are in the middle, allow Actions that are made by GitHub directly, as well as from verified creators.\nCodespaces - 🍩 Codespaces is essentially a cloud based development environment powered by Visual Studio Code. Its name is also real close to the name of a company that closed after getting wrecked by an attack, but it is completely unrelated.\nIf you do not intend on using Codespaces, do not allow it, as the VMs it uses are relatively expensive.\nKeep in mind that this feature exists, especially if you start thinking of ways to allow developers to work in standardized environments without having too much control on their actual computers.\nAutomating this - 🌶 See automation!\n","description":"","tags":null,"title":"Safer GitHub Setup","uri":"/posts/safer-github-setup/"},{"categories":["Secure Startup"],"content":"TLDR Buy a domain on a trusted top-level domain, using an email with multi-factor authentication (MFA). On the registrar and domain, enable MFA, turn on transfer lock and domain privacy on the domain until you get corporate mailing and email addresses.\nBuying your first domain As a brand new company, you’re going to need a domain name rapidly. This domain name will quickly be used for your website, email, and generic “proof of existence”.\nIt’ll become the root for the identity related to your company. The faster you create it, the sooner it will stop looking suspicious, as many systems treat newly registered domains (NRDs) as suspicious.\nWhy would you need a website rapidly, if you have nothing ready to sell yet? Many services require being linked to a domain. For example, to get onboarded to Apple’s Device Enrolment Program, which lets you drop-ship laptops to employees directly from Apple but ready to go with your configuration, you need to have an HTTPS website. To get a certificate, you must be able to prove you control a domain. Therefore, there’s no time to waste, you should get your domain as fast as possible when starting a new company.\nPicking a domain name  Ensure your company name and the domain you want to buy are available and legally appropriate. I am not a lawyer and don’t pretend to be one on the Internet, but I recommend using real ones. You probably also want input from a marketing firm that’ll help you pick a name while avoiding mistakes that are only hilarious when they happen to others. Avoid “weird” top-level domains. You do not want your company to depend on a small country’s control of a TLD, and you definitely don’t want it to use a domain name known for being used for a lot of malicious activity. Pick an old favorite such as .com, even if it means not getting the perfect short name (you can get the weird TLD ones as well, but make your primary the “good” one.)  Buying the domain name Once you’ve picked your domain, you need to buy it. If you’re a startup, you don’t have any infrastructure yet, and probably have to rely on personal email accounts to get things started.\nEnsure you have Multi-Factor Authentication enabled on your account, ideally, using a method that is not SMS or voice based. Your email account will be used to buy the domain, and until you have corporate email set up, could turn out to be the weakest link towards attacking your new company. It must be as safe as possible. Pick a registrar that supports Multi-Factor Authentication. Many do by now, though some don’t murder elephants, and enable MFA as fast as possible. Buy the domain for multiple years. You want to be sure you have time to move to a more corporate type account by the time it gets renewed. Configure domain privacy. While it looks shady for a company to hide details from WHOIS, you don’t want to share your information until you have a real corporate address and email account. Configure the Registrar Lock. This will ensure your domain can’t easily be transferred to another registrar out of your control. Follow the same process to buy your domain names on other common TLDs (.net, org, your country’s).  Next Steps Once you’ve configured corporate email (post on that coming soon!), you’ll need to go back and edit your domain.\n If the cloud provider you’re using has a cloud registrar, prepare to move your domain(s) there. Keep in mind it’s not always possible to move recently purchased domains, sometimes requiring a period of 60 days to go by before moving them. Set a reminder. Why use a cloud provider’s registrar? You’re going to spend a lot of time controlling access to cloud resources, making domains a part of that is a good way to re-use future work. No matter what, make sure that logging in to your registrar as well as any “recovery option” is configured to use company emails by this point, not personal ones. Change the contact information on the domain to a generic group on your new corporate email environment, pointing to at least two people. You wouldn’t want an important notice related to your domain to be missed due to vacation. Once you have a mailing address, disable domain privacy, as it looks suspicious for a company to be using that.  ","description":"","tags":null,"title":"Buying your first domain","uri":"/posts/buying_domain/"},{"categories":["Links"],"content":"Ransomulator is a tool for BloodHound.\nBloodHound is an open source tool that uses the power of graph databases to help attackers and defenders determine how their Active Directory environments could be compromised. Traditionally used by red teams, it’s a tool that blue teams should leverage extensively.\nAs BloodHound gathers information on computers, accounts, sessions and much more, it is an ideal tool to generate a simulated ransomware infection, quickly allowing you to understand how fast a compromised system could lead to all systems being compromised. Ransomulator helps you do that more easily.\nI’ve previously made training for BloodHound[^1: Affiliate Link], available on Pluralsight.\n","description":"","tags":null,"title":"Simulating Ransomware with Ransomulator","uri":"/posts/ransomulator/"}]